#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : axi_ethernet
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_ethernet

## Peripheral Options
OPTION STYLE = HDL
OPTION RUN_NGCBUILD = TRUE
#OPTION PAY_CORE_MAP = ( axi_ethernet_soft_temac_wrap_v3_01_a:axi_ethernet_soft_10_100@2012.04 = ( ISVALID C_TYPE==0 )  , axi_ethernet_soft_temac_wrap_v3_01_a:axi_ethernet_soft_tri_mode@2012.04 = ( ISVALID C_TYPE==1 )  , axi_ethernet_soft_temac_wrap_v3_01_a:axi_ethernet_avb@2012.04 = ( ISVALID C_AVB==1 )  )
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION USAGE_LEVEL = BASE_USER
#OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = generate_corelevel_ucf
#OPTION ADDITIONAL_OUTPUTS = CONSTRAINTS
#OPTION IPLEVEL_DRC_PROC = check_iplevel_settings
#OPTION SYSLEVEL_DRC_PROC = check_syslevel_settings
OPTION DESC = AXI Ethernet Embedded IP
#OPTION LONG_DESC = Embedded Ethernet core that implements a Tri-mode (10/100/1000 Mbps) Ethernet MAC or a 10/100 Mbps Ethernet MAC to support MII/GMII/SGMII/RGMII/1000Base-X PHY types
#OPTION IP_GROUP = Communication High-Speed:MICROBLAZE:ARM-A9
#OPTION DATASHEET_NAME = ds759_axi_ethernet
OPTION ARCH_SUPPORT_MAP = (spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION, virtex7=PRODUCTION, kintex7=PRODUCTION, artix7=PRE_PRODUCTION, zynq=PRE_PRODUCTION, virtex7l=PRE_PRODUCTION, kintex7l=PRE_PRODUCTION, aartix7=PRE_PRODUCTION, artix7l=PRE_PRODUCTION, virtex7ht=PRE_PRODUCTION, qvirtex7=PRE_PRODUCTION, qkintex7=PRE_PRODUCTION, qkintex7l=PRE_PRODUCTION, qartix7=PRE_PRODUCTION, qartix7l=PRE_PRODUCTION, azynq=PRE_PRODUCTION, qzynq=PRE_PRODUCTION, qvirtex7l=PRE_PRODUCTION)

#IO_INTERFACE IO_IF = AXIETHERNETIF, IO_TYPE = XIL_AXIETHERNET_V1

## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = AXI_STR_TXC, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = AXI_STR_TXD, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = AXI_STR_RXS, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = AXI_STR_RXD, BUS_STD = AXIS, BUS_TYPE = INITIATOR
#BUS_INTERFACE BUS = AXI_STR_AVBTX, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_AVB == 1)
#BUS_INTERFACE BUS = AXI_STR_AVBRX, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_AVB == 1)

## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_TXC_TDATA_WIDTH = 32, DT = INTEGER, BUS = AXI_STR_TXC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_TXD_TDATA_WIDTH = 64, DT = INTEGER, BUS = AXI_STR_TXD, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_RXS_TDATA_WIDTH = 32, DT = INTEGER, BUS = AXI_STR_RXS, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_RXD_TDATA_WIDTH = 64, DT = INTEGER, BUS = AXI_STR_RXD, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_TXC_PROTOCOL = XIL_AXI_STREAM_ETH_CTRL, DT = STRING, BUS = AXI_STR_TXC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_TXD_PROTOCOL = XIL_AXI_STREAM_ETH_DATA, DT = STRING, BUS = AXI_STR_TXD, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_RXS_PROTOCOL = XIL_AXI_STREAM_ETH_CTRL, DT = STRING, BUS = AXI_STR_RXS, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_AXI_STR_RXD_PROTOCOL = XIL_AXI_STREAM_ETH_DATA, DT = STRING, BUS = AXI_STR_RXD, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_S_AXI_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = S_AXI, IO_IS = clk_freq, CLK_PORT = S_AXI_ACLK, CLK_UNIT = HZ, ASSIGNMENT = REQUIRE
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI, MIN_SIZE = 0x1000, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ID_WIDTH = 16, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = UPDATE
PARAMETER C_TXMEM = 4096, DT = INTEGER, RANGE = (2048, 4096, 8192, 16384, 32768), VALUES = (2048= 2048B, 4096= 4096B, 8192= 8192B, 16384= 16384B, 32768= 32768B )
PARAMETER C_RXMEM = 4096, DT = INTEGER, RANGE = (2048, 4096, 8192, 16384, 32768), VALUES = (2048= 2048B, 4096= 4096B, 8192= 8192B, 16384= 16384B, 32768= 32768B )
PARAMETER C_TXCSUM = 0, DT = INTEGER, RANGE = (0:2), VALUES = (0=  No Checksum offload , 1=  Partial checksum offload , 2= Full IPv4 checksum offload)
PARAMETER C_RXCSUM = 0, DT = INTEGER, RANGE = (0:2), VALUES = (0=  No Checksum offload , 1=  Partial checksum offload , 2= Full IPv4 checksum offload)
PARAMETER C_TXVLAN_TRAN = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_RXVLAN_TRAN = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_TXVLAN_TAG = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_RXVLAN_TAG = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_TXVLAN_STRP = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_RXVLAN_STRP = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_SIMULATION = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_TYPE==0 || C_TYPE==1)
PARAMETER C_AXI_STR_TXC_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = AXI_STR_TXC, TYPE = NON_HDL

## Ports
PORT S_AXI_ACLK = "", DIR = I, BUS = S_AXI, SIGIS = CLK
PORT S_AXI_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_TXC:AXI_STR_TXD:AXI_STR_RXS:AXI_STR_RXD, SIGIS = RST
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT AXI_STR_TXD_ACLK = ACLK, DIR = I, BUS = AXI_STR_TXD, SIGIS = CLK, INITIALVAL = VCC
PORT AXI_STR_TXD_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_TXC:AXI_STR_TXD:AXI_STR_RXS:AXI_STR_RXD, SIGIS = RST
PORT AXI_STR_TXD_TVALID = TVALID, DIR = I, BUS = AXI_STR_TXD, INITIALVAL = GND
PORT AXI_STR_TXD_TREADY = TREADY, DIR = O, BUS = AXI_STR_TXD
PORT AXI_STR_TXD_TLAST = TLAST, DIR = I, BUS = AXI_STR_TXD, INITIALVAL = GND
PORT AXI_STR_TXD_TKEEP = TKEEP, DIR = I, BUS = AXI_STR_TXD, INITIALVAL = VCC, VEC = [7:0], ENDIAN = LITTLE
PORT AXI_STR_TXD_TDATA = TDATA, DIR = I, BUS = AXI_STR_TXD, INITIALVAL = GND, VEC = [63:0], ENDIAN = LITTLE
PORT AXI_STR_TXC_ACLK = ACLK, DIR = I, BUS = AXI_STR_TXC, SIGIS = CLK, INITIALVAL = VCC
PORT AXI_STR_TXC_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_TXC:AXI_STR_TXD:AXI_STR_RXS:AXI_STR_RXD, SIGIS = RST
PORT AXI_STR_TXC_TVALID = TVALID, DIR = I, BUS = AXI_STR_TXC, INITIALVAL = GND
PORT AXI_STR_TXC_TREADY = TREADY, DIR = O, BUS = AXI_STR_TXC
PORT AXI_STR_TXC_TLAST = TLAST, DIR = I, BUS = AXI_STR_TXC, INITIALVAL = GND
PORT AXI_STR_TXC_TKEEP = TKEEP, DIR = I, BUS = AXI_STR_TXC, INITIALVAL = VCC, VEC = [3:0], ENDIAN = LITTLE
PORT AXI_STR_TXC_TDATA = TDATA, DIR = I, BUS = AXI_STR_TXC, INITIALVAL = GND, VEC = [31:0], ENDIAN = LITTLE
PORT AXI_STR_RXD_ACLK = ACLK, DIR = I, BUS = AXI_STR_RXD, SIGIS = CLK, INITIALVAL = VCC
PORT AXI_STR_RXD_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_TXC:AXI_STR_TXD:AXI_STR_RXS:AXI_STR_RXD, SIGIS = RST
PORT AXI_STR_RXD_TVALID = TVALID, DIR = O, BUS = AXI_STR_RXD
PORT AXI_STR_RXD_TREADY = TREADY, DIR = I, BUS = AXI_STR_RXD, INITIALVAL = GND
PORT AXI_STR_RXD_TLAST = TLAST, DIR = O, BUS = AXI_STR_RXD
PORT AXI_STR_RXD_TKEEP = TKEEP, DIR = O, BUS = AXI_STR_RXD, VEC = [7:0], ENDIAN = LITTLE
PORT AXI_STR_RXD_TDATA = TDATA, DIR = O, BUS = AXI_STR_RXD, VEC = [63:0], ENDIAN = LITTLE
PORT AXI_STR_RXS_ACLK = ACLK, DIR = I, BUS = AXI_STR_RXS, SIGIS = CLK, INITIALVAL = VCC
PORT AXI_STR_RXS_ARESETN = ARESETN, DIR = I, BUS = S_AXI:AXI_STR_TXC:AXI_STR_TXD:AXI_STR_RXS:AXI_STR_RXD, SIGIS = RST
PORT AXI_STR_RXS_TVALID = TVALID, DIR = O, BUS = AXI_STR_RXS
PORT AXI_STR_RXS_TREADY = TREADY, DIR = I, BUS = AXI_STR_RXS, INITIALVAL = GND
PORT AXI_STR_RXS_TLAST = TLAST, DIR = O, BUS = AXI_STR_RXS
PORT AXI_STR_RXS_TKEEP = TKEEP, DIR = O, BUS = AXI_STR_RXS, VEC = [3:0], ENDIAN = LITTLE
PORT AXI_STR_RXS_TDATA = TDATA, DIR = O, BUS = AXI_STR_RXS, VEC = [31:0], ENDIAN = LITTLE

BUS_INTERFACE BUS = AXI_MAC_TX, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = AXI_MAC_RX, BUS_STD = AXIS, BUS_TYPE = TARGET
PORT rx_mac_aclk       = "CLK",    DIR = I, SIGIS = CLK, BUS = AXI_MAC_RX, INITIALVAL = VCC
PORT rx_reset          = "RESET",  DIR = I, SIGIS = RST, BUS = AXI_MAC_RX

PORT rx_axis_mac_tvalid= TVALID,   DIR = I, BUS = AXI_MAC_RX
PORT rx_axis_mac_tready= TREADY,   DIR = O, BUS = AXI_MAC_RX
PORT rx_axis_mac_tdata = TDATA,    DIR = I, BUS = AXI_MAC_RX, VEC = [63:0], ENDIAN = LITTLE
PORT rx_axis_mac_tkeep = TKEEP,    DIR = I, BUS = AXI_MAC_RX, VEC = [7:0], ENDIAN = LITTLE
PORT rx_axis_mac_tlast = TLAST,    DIR = I, BUS = AXI_MAC_RX
PORT rx_axis_mac_tuser = TUSER,    DIR = I, BUS = AXI_MAC_RX

PORT tx_mac_aclk       = "CLK",    DIR = I, SIGIS = CLK, BUS = AXI_MAC_TX , INITIALVAL = VCC
PORT tx_reset          = "RESET",  DIR = I, SIGIS = RST, BUS = AXI_MAC_TX

PORT tx_axis_mac_tdata = TDATA,    DIR = O, BUS = AXI_MAC_TX, VEC = [63:0], ENDIAN = LITTLE
PORT tx_axis_mac_tvalid= TVALID,   DIR = O, BUS = AXI_MAC_TX
PORT tx_axis_mac_tkeep = TKEEP,    DIR = O, BUS = AXI_MAC_TX, VEC = [7:0], ENDIAN = LITTLE
PORT tx_axis_mac_tlast = TLAST,    DIR = O, BUS = AXI_MAC_TX
PORT tx_axis_mac_tready= TREADY,   DIR = I, BUS = AXI_MAC_TX
PORT tx_axis_mac_tuser = TUSER,    DIR = O, BUS = AXI_MAC_TX

END
