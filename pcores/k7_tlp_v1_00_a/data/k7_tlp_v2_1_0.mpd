#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : k7_tlp
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN k7_tlp

## Peripheral Options
OPTION RUN_NGCBUILD = TRUE
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION STYLE = HDL
#OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = platgen_update
OPTION ADDITIONAL_OUTPUTS = CONSTRAINTS
#OPTION IPLEVEL_DRC_PROC = check_iplevel_settings
OPTION USAGE_LEVEL = BASE_USER
OPTION DESC = AXI Memory Mapped To PCI Express
OPTION LONG_DESC = A bridge between AXI Memory Mapped and the enhanced Xilinx LogicCORE PCI Express Interface core
OPTION IP_GROUP = PCI:MICROBLAZE:ARM-A9
OPTION ARCH_SUPPORT_MAP = (spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION, virtex7=PRODUCTION, kintex7=PRODUCTION, artix7=PRE_PRODUCTION, zynq=PRE_PRODUCTION, virtex7l=PRE_PRODUCTION, kintex7l=PRE_PRODUCTION, aartix7=PRE_PRODUCTION, artix7l=PRE_PRODUCTION, virtex7ht=PRE_PRODUCTION, qvirtex7=PRE_PRODUCTION, qkintex7=PRE_PRODUCTION, qkintex7l=PRE_PRODUCTION, qartix7=PRE_PRODUCTION, qartix7l=PRE_PRODUCTION, azynq=PRE_PRODUCTION, qzynq=PRE_PRODUCTION, qvirtex7l=PRE_PRODUCTION)


## Bus Interfaces
#BUS_INTERFACE BUS = M_AXI, BUS_STD = AXI, BUS_TYPE = MASTER
#BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
#BUS_INTERFACE BUS = S_AXI_CTL, BUS_STD = AXI, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_INSTANCE = K7_TLP, DT = STRING
PARAMETER C_FAMILY = kintex7, DT = STRING
#PARAMETER C_EP_LINK_PARTNER_RCB = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_INCLUDE_RC == 0)
#PARAMETER C_S_AXI_ID_WIDTH = 4, DT = INTEGER
#PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, RANGE = (32, 64, 128)
#PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
#PARAMETER C_M_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = M_AXI, RANGE = (32, 64, 128)
#PARAMETER C_M_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_NO_OF_LANES = 1, DT = INTEGER, RANGE = (1,2,4,8)
PARAMETER C_MAX_LINK_SPEED = 0, DT = INTEGER, RANGE = (0:1)
#PARAMETER C_REF_CLK_FREQ = 0, DT = INTEGER, RANGE = (0:2)
#PARAMETER C_PCIE_USE_MODE = 1.0, DT = STRING, VALUES = ( 1.0  =  1.0 ,  1.1  =  1.1 ,  3.0  =  3.0 ), ISVALID = ([xstrncmp C_FAMILY kintex7] || [xstrncmp C_FAMILY virtex7] || [xstrncmp C_FAMILY artix7])
PARAMETER C_DEVICE_ID = 0x0000, DT = std_logic_vector (15 downto 0)
PARAMETER C_VENDOR_ID = 0x0000, DT = std_logic_vector (15 downto 0)
PARAMETER C_CLASS_CODE = 0x000000, DT = std_logic_vector (23 downto 0)
PARAMETER C_REV_ID = 0x00, DT = std_logic_vector (7 downto 0)
PARAMETER C_SUBSYSTEM_ID = 0x0000, DT = std_logic_vector (15 downto 0)
PARAMETER C_SUBSYSTEM_VENDOR_ID = 0x0000, DT = std_logic_vector (15 downto 0)
PARAMETER C_PCIE_CAP_SLOT_IMPLEMENTED = 0, DT = INTEGER, RANGE = (0:1)
#PARAMETER C_INTERRUPT_PIN = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_INCLUDE_RC == 0)
#PARAMETER C_COMP_TIMEOUT = 1, DT = INTEGER, RANGE = (0:1)
#PARAMETER C_INCLUDE_RC = 0, DT = INTEGER, RANGE = (0:1)
#PARAMETER C_S_AXI_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = S_AXI, RANGE = (0:1)
#PARAMETER C_INCLUDE_BAROFFSET_REG = 1, DT = INTEGER, RANGE = (0:1)
#PARAMETER C_NUM_MSI_REQ = 0, DT = INTEGER, RANGE = (0:5)
#PARAMETER C_AXIBAR_NUM = 6, DT = INTEGER, RANGE = (1:6)
#PARAMETER C_AXIBAR_AS_0 = 0, DT = INTEGER, RANGE = (0:1)
#PARAMETER C_AXIBAR_AS_1 = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_AXIBAR_NUM >= 2)
#PARAMETER C_AXIBAR_AS_2 = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_AXIBAR_NUM >= 3)
#PARAMETER C_AXIBAR_AS_3 = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_AXIBAR_NUM >= 4)
#PARAMETER C_AXIBAR_AS_4 = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_AXIBAR_NUM >= 5)
#PARAMETER C_AXIBAR_AS_5 = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_AXIBAR_NUM == 6)
#PARAMETER C_AXIBAR_0 = 0xFFFFFFFF, DT = std_logic_vector, BUS = S_AXI, ADDRESS = BASE, PAIR = C_AXIBAR_HIGHADDR_0
#PARAMETER C_AXIBAR_1 = 0xFFFFFFFF, DT = std_logic_vector, BUS = S_AXI, ADDRESS = BASE, PAIR = C_AXIBAR_HIGHADDR_1, ISVALID = (C_AXIBAR_NUM >= 2)
#PARAMETER C_AXIBAR_2 = 0xFFFFFFFF, DT = std_logic_vector, BUS = S_AXI, ADDRESS = BASE, PAIR = C_AXIBAR_HIGHADDR_2, ISVALID = (C_AXIBAR_NUM >= 3)
#PARAMETER C_AXIBAR_3 = 0xFFFFFFFF, DT = std_logic_vector, BUS = S_AXI, ADDRESS = BASE, PAIR = C_AXIBAR_HIGHADDR_3, ISVALID = (C_AXIBAR_NUM >= 4)
#PARAMETER C_AXIBAR_4 = 0xFFFFFFFF, DT = std_logic_vector, BUS = S_AXI, ADDRESS = BASE, PAIR = C_AXIBAR_HIGHADDR_4, ISVALID = (C_AXIBAR_NUM >= 5)
#PARAMETER C_AXIBAR_5 = 0xFFFFFFFF, DT = std_logic_vector, BUS = S_AXI, ADDRESS = BASE, PAIR = C_AXIBAR_HIGHADDR_5, ISVALID = (C_AXIBAR_NUM == 6)
#PARAMETER C_AXIBAR_HIGHADDR_0 = 0x00000000, DT = std_logic_vector, BUS = S_AXI, ADDRESS = HIGH, PAIR = C_AXIBAR_0
#PARAMETER C_AXIBAR_HIGHADDR_1 = 0x00000000, DT = std_logic_vector, BUS = S_AXI, ADDRESS = HIGH, PAIR = C_AXIBAR_1, ISVALID = (C_AXIBAR_NUM >= 2)
#PARAMETER C_AXIBAR_HIGHADDR_2 = 0x00000000, DT = std_logic_vector, BUS = S_AXI, ADDRESS = HIGH, PAIR = C_AXIBAR_2, ISVALID = (C_AXIBAR_NUM >= 3)
#PARAMETER C_AXIBAR_HIGHADDR_3 = 0x00000000, DT = std_logic_vector, BUS = S_AXI, ADDRESS = HIGH, PAIR = C_AXIBAR_3, ISVALID = (C_AXIBAR_NUM >= 4)
#PARAMETER C_AXIBAR_HIGHADDR_4 = 0x00000000, DT = std_logic_vector, BUS = S_AXI, ADDRESS = HIGH, PAIR = C_AXIBAR_4, ISVALID = (C_AXIBAR_NUM >= 5)
#PARAMETER C_AXIBAR_HIGHADDR_5 = 0x00000000, DT = std_logic_vector, BUS = S_AXI, ADDRESS = HIGH, PAIR = C_AXIBAR_5, ISVALID = (C_AXIBAR_NUM == 6)
#PARAMETER C_AXIBAR2PCIEBAR_0 = 0x00000000, DT = std_logic_vector
#PARAMETER C_AXIBAR2PCIEBAR_1 = 0x00000000, DT = std_logic_vector, ISVALID = (C_AXIBAR_NUM >= 2)
#PARAMETER C_AXIBAR2PCIEBAR_2 = 0x00000000, DT = std_logic_vector, ISVALID = (C_AXIBAR_NUM >= 3)
#PARAMETER C_AXIBAR2PCIEBAR_3 = 0x00000000, DT = std_logic_vector, ISVALID = (C_AXIBAR_NUM >= 4)
#PARAMETER C_AXIBAR2PCIEBAR_4 = 0x00000000, DT = std_logic_vector, ISVALID = (C_AXIBAR_NUM >= 5)
#PARAMETER C_AXIBAR2PCIEBAR_5 = 0x00000000, DT = std_logic_vector, ISVALID = (C_AXIBAR_NUM == 6)
#PARAMETER C_PCIEBAR_NUM = 1, DT = INTEGER, RANGE = (1:3)
#PARAMETER C_PCIEBAR_AS = 0, DT = INTEGER, RANGE = (0:1)
#PARAMETER C_PCIEBAR_LEN_0 = 13, DT = INTEGER, RANGE = (13:31)
#PARAMETER C_PCIEBAR_LEN_1 = 13, DT = INTEGER, RANGE = (13:31), ISVALID = (C_PCIEBAR_NUM >= 2)
#PARAMETER C_PCIEBAR_LEN_2 = 13, DT = INTEGER, RANGE = (13:31), ISVALID = (C_PCIEBAR_NUM == 3)
#PARAMETER C_PCIEBAR2AXIBAR_0 = 0xFFFFFFFF, DT = std_logic_vector
#PARAMETER C_PCIEBAR2AXIBAR_1 = 0xFFFFFFFF, DT = std_logic_vector, ISVALID = (C_PCIEBAR_NUM >= 2)
#PARAMETER C_PCIEBAR2AXIBAR_2 = 0xFFFFFFFF, DT = std_logic_vector, ISVALID = (C_PCIEBAR_NUM == 3)
#PARAMETER C_PCIEBAR2AXIBAR_0_SEC = 1, DT = INTEGER, RANGE = (0:1)
#PARAMETER C_PCIEBAR2AXIBAR_1_SEC = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_PCIEBAR_NUM >= 2)
#PARAMETER C_PCIEBAR2AXIBAR_2_SEC = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_PCIEBAR_NUM == 3)
#PARAMETER C_BASEADDR = 0xffffffff, DT = STD_LOGIC_VECTOR (31 downto 0), PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_CTL, MIN_SIZE = 0x7F, ASSIGNMENT = REQUIRE
#PARAMETER C_HIGHADDR = 0x00000000, DT = STD_LOGIC_VECTOR (31 downto 0), PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_CTL, ASSIGNMENT = REQUIRE
#PARAMETER C_S_AXI_CTL_ACLK_FREQ_HZ = 125000000, DT = INTEGER, BUS = S_AXI_CTL, TYPE = NON_HDL
#PARAMETER C_S_AXI_CTL_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI_CTL, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER C_AXI_ACLK_FREQ_HZ = 125000000, DT = INTEGER, BUS = S_AXI:M_AXI, TYPE = NON_HDL, RANGE = (50000000:200000000)
#PARAMETER C_M_AXI_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER C_M_AXI_SUPPORT_THREADS = 0, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER C_M_AXI_SUPPORTS_READ = 1, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER C_M_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER C_S_AXI_PROTOCOL = AXI4, DT = STRING, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER C_S_AXI_SUPPORT_THREADS = 1, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER C_S_AXI_SUPPORTS_READ = 1, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER C_S_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER C_INTERCONNECT_S_AXI_WRITE_ACCEPTANCE = 2, DT = INTEGER, BUS = S_AXI, TYPE = NON_HDL, RANGE = (1,2)
#PARAMETER C_INTERCONNECT_S_AXI_READ_ACCEPTANCE = 8, DT = INTEGER, BUS = S_AXI, TYPE = NON_HDL, RANGE = (1,2,4,8)
#PARAMETER C_INTERCONNECT_S_AXI_IS_ACLK_ASYNC = 1, DT = INTEGER, BUS = S_AXI, TYPE = NON_HDL, RANGE = (0,1)
#PARAMETER C_INTERCONNECT_M_AXI_WRITE_ISSUING = 4, DT = INTEGER, BUS = M_AXI, TYPE = NON_HDL, RANGE = (1,2,4)
#PARAMETER C_INTERCONNECT_M_AXI_READ_ISSUING = 4, DT = INTEGER, BUS = M_AXI, TYPE = NON_HDL, RANGE = (1,2,4)
#PARAMETER C_INTERCONNECT_M_AXI_IS_ACLK_ASYNC = 1, DT = INTEGER, BUS = M_AXI, TYPE = NON_HDL, RANGE = (0,1)
#PARAMETER C_INTERCONNECT_S_AXI_CTL_IS_ACLK_ASYNC = 1, DT = INTEGER, BUS = S_AXI_CTL, TYPE = NON_HDL, RANGE = (0,1)
#PARAMETER REF_CLK_FREQ_HZ = 100000000, DT = REAL, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = update_aclk_out
PARAMETER PIPE_SIM_MODE = "FALSE", DT = STRING
PARAMETER PL_FAST_TRAIN = "FALSE", DT = STRING

## Ports
#PORT axi_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI:S_AXI
#PORT axi_aclk_out = "", DIR = O, SIGIS = CLK, BUS = M_AXI:S_AXI, CLK_INPORT = REFCLK, CLK_FACTOR = 1.0 * C_AXI_ACLK_FREQ_HZ / (1.0 * REF_CLK_FREQ_HZ)
#PORT axi_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI:S_AXI
#PORT axi_ctl_aclk = "", DIR = I, SIGIS = CLK, BUS = S_AXI_CTL
#PORT axi_ctl_aclk_out = "", DIR = O, SIGIS = CLK, BUS = S_AXI_CTL, CLK_INPORT = REFCLK, CLK_FACTOR = 1.0 * C_AXI_ACLK_FREQ_HZ / (1.0 * REF_CLK_FREQ_HZ)
 PORT mmcm_lock = "", DIR = O
#PORT interrupt_out = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH
#PORT INTX_MSI_Request = "", DIR = I
#PORT INTX_MSI_Grant = "", DIR = O
#PORT MSI_enable = "", DIR = O
#PORT MSI_Vector_Num = "", DIR = I, VEC = [4:0]
#PORT MSI_Vector_Width = "", DIR = O, VEC = [2:0]
#PORT s_axi_awid = AWID, DIR = I, VEC = [C_S_AXI_ID_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_awaddr = AWADDR, DIR = I, VEC = [C_S_AXI_ADDR_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_awregion = AWREGION, DIR = I, VEC = [3:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_awlen = AWLEN, DIR = I, VEC = [7:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_awsize = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_awburst = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_awvalid = AWVALID, DIR = I, BUS = S_AXI
#PORT s_axi_awready = AWREADY, DIR = O, BUS = S_AXI
#PORT s_axi_wdata = WDATA, DIR = I, VEC = [C_S_AXI_DATA_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_wstrb = WSTRB, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH/8)-1:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_wlast = WLAST, DIR = I, BUS = S_AXI
#PORT s_axi_wvalid = WVALID, DIR = I, BUS = S_AXI
#PORT s_axi_wready = WREADY, DIR = O, BUS = S_AXI
#PORT s_axi_bid = BID, DIR = O, VEC = [C_S_AXI_ID_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_bresp = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_bvalid = BVALID, DIR = O, BUS = S_AXI
#PORT s_axi_bready = BREADY, DIR = I, BUS = S_AXI
#PORT s_axi_arid = ARID, DIR = I, VEC = [C_S_AXI_ID_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_araddr = ARADDR, DIR = I, VEC = [C_S_AXI_ADDR_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_arregion = ARREGION, DIR = I, VEC = [3:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_arlen = ARLEN, DIR = I, VEC = [7:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_arsize = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_arburst = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_arvalid = ARVALID, DIR = I, BUS = S_AXI
#PORT s_axi_arready = ARREADY, DIR = O, BUS = S_AXI
#PORT s_axi_rid = RID, DIR = O, VEC = [C_S_AXI_ID_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_rdata = RDATA, DIR = O, VEC = [C_S_AXI_DATA_WIDTH-1:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_rresp = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI, ENDIAN = LITTLE
#PORT s_axi_rlast = RLAST, DIR = O, BUS = S_AXI
#PORT s_axi_rvalid = RVALID, DIR = O, BUS = S_AXI
#PORT s_axi_rready = RREADY, DIR = I, BUS = S_AXI
#PORT m_axi_awaddr = AWADDR, DIR = O, VEC = [C_M_AXI_ADDR_WIDTH-1:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_awvalid = AWVALID, DIR = O, BUS = M_AXI
#PORT m_axi_awready = AWREADY, DIR = I, BUS = M_AXI
#PORT m_axi_awlock = AWLOCK, DIR = O, BUS = M_AXI
#PORT m_axi_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_wdata = WDATA, DIR = O, VEC = [C_M_AXI_DATA_WIDTH-1:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_wstrb = WSTRB, DIR = O, VEC = [(C_M_AXI_DATA_WIDTH/8)-1:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_wlast = WLAST, DIR = O, BUS = M_AXI
#PORT m_axi_wvalid = WVALID, DIR = O, BUS = M_AXI
#PORT m_axi_wready = WREADY, DIR = I, BUS = M_AXI
#PORT m_axi_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_bvalid = BVALID, DIR = I, BUS = M_AXI
#PORT m_axi_bready = BREADY, DIR = O, BUS = M_AXI
#PORT m_axi_araddr = ARADDR, DIR = O, VEC = [C_M_AXI_ADDR_WIDTH-1:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_arlen = ARLEN, DIR = O, VEC = [7:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_arsize = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_arburst = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_arprot = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_arvalid = ARVALID, DIR = O, BUS = M_AXI
#PORT m_axi_arready = ARREADY, DIR = I, BUS = M_AXI
#PORT m_axi_arlock = ARLOCK, DIR = O, BUS = M_AXI
#PORT m_axi_arcache = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_rdata = RDATA, DIR = I, VEC = [C_M_AXI_DATA_WIDTH-1:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_rresp = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI, ENDIAN = LITTLE
#PORT m_axi_rlast = RLAST, DIR = I, BUS = M_AXI
#PORT m_axi_rvalid = RVALID, DIR = I, BUS = M_AXI
#PORT m_axi_rready = RREADY, DIR = O, BUS = M_AXI
PORT pci_exp_txp = "", DIR = O, VEC = [C_NO_OF_LANES-1:0]
PORT pci_exp_txn = "", DIR = O, VEC = [C_NO_OF_LANES-1:0]
PORT pci_exp_rxp = "", DIR = I, VEC = [C_NO_OF_LANES-1:0]
PORT pci_exp_rxn = "", DIR = I, VEC = [C_NO_OF_LANES-1:0]
PORT REFCLK    = "", DIR = I, SIGIS = CLK
PORT sys_rst_n = "", DIR = I, SIGIS = RST, INITIAL = VCC
#PORT s_axi_ctl_awaddr = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_awvalid = AWVALID, DIR = I, BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_awready = AWREADY, DIR = O, BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_wdata = WDATA, DIR = I, VEC = [31:0], BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_wstrb = WSTRB, DIR = I, VEC = [3:0], BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_wvalid = WVALID, DIR = I, BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_wready = WREADY, DIR = O, BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_bresp = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_bvalid = BVALID, DIR = O, BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_bready = BREADY, DIR = I, BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_araddr = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_arvalid = ARVALID, DIR = I, BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_arready = ARREADY, DIR = O, BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_rdata = RDATA, DIR = O, VEC = [31:0], BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_rresp = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_rvalid = RVALID, DIR = O, BUS = S_AXI_CTL, ENDIAN = LITTLE
#PORT s_axi_ctl_rready = RREADY, DIR = I, BUS = S_AXI_CTL, ENDIAN = LITTLE

BUS_INTERFACE BUS = S_TLP, BUS_STD = TLP, BUS_TYPE = TARGET
PORT user_clk         = user_clk,          DIR = O, BUS = S_TLP
PORT user_reset       = user_reset,        DIR = O, BUS = S_TLP
PORT user_link_up     = user_link_up,      DIR = O, BUS = S_TLP

PORT s_axis_tx_tready = s_axis_tx_tready,  DIR = O, BUS = S_TLP
PORT s_axis_tx_tdata  = s_axis_tx_tdata,   DIR = I, BUS = S_TLP, VEC = [127:0]
PORT s_axis_tx_tkeep  = s_axis_tx_tkeep,   DIR = I, BUS = S_TLP, VEC = [15:0]
PORT s_axis_tx_tlast  = s_axis_tx_tlast,   DIR = I, BUS = S_TLP
PORT s_axis_tx_tvalid = s_axis_tx_tvalid,  DIR = I, BUS = S_TLP
PORT s_axis_tx_tuser  = s_axis_tx_tuser,   DIR = I, BUS = S_TLP, VEC = [3:0]

PORT m_axis_rx_tready = s_axis_rx_tready,  DIR = I, BUS = S_TLP
PORT m_axis_rx_tdata  = s_axis_rx_tdata,   DIR = O, BUS = S_TLP, VEC = [127:0]
PORT m_axis_rx_tkeep  = s_axis_rx_tkeep,   DIR = O, BUS = S_TLP, VEC = [15:0]
PORT m_axis_rx_tuser  = s_axis_rx_tuser,   DIR = O, BUS = S_TLP, VEC = [21:0]
PORT m_axis_rx_tlast  = s_axis_rx_tlast,   DIR = O, BUS = S_TLP
PORT m_axis_rx_tvalid = s_axis_rx_tvalid,  DIR = O, BUS = S_TLP

PORT cfg_to_turnoff   = cfg_to_turnoff,    DIR = O, BUS = S_TLP
PORT cfg_turnoff_ok   = cfg_turnoff_ok,    DIR = I, BUS = S_TLP

PORT cfg_completer_id = cfg_completer_id,  DIR = O, BUS = S_TLP, VEC = [11:0]

PORT fc_cpld          = fc_cpld,           DIR = O, BUS = S_TLP, VEC = [11:0]
PORT fc_cplh          = fc_cplh,           DIR = O, BUS = S_TLP, VEC = [7:0]
PORT fc_npd           = fc_npd,            DIR = O, BUS = S_TLP, VEC = [11:0]
PORT fc_nph           = fc_nph,            DIR = O, BUS = S_TLP, VEC = [7:0]
PORT fc_pd            = fc_pd,             DIR = O, BUS = S_TLP, VEC = [11:0]
PORT fc_ph            = fc_ph,             DIR = O, BUS = S_TLP, VEC = [7:0]
PORT fc_sel           = fc_sel,            DIR = I, BUS = S_TLP, VEC = [2:0]
PORT tx_buf_av        = tx_buf_av,         DIR = O, BUS = S_TLP, VEC = [5:0]

END
