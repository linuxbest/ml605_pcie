#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : axi_dma
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_dma

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION USAGE_LEVEL = BASE_USER
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = platgen_update
OPTION RUN_NGCBUILD = TRUE
OPTION STYLE = HDL
OPTION ADDITIONAL_OUTPUTS = CONSTRAINTS
OPTION DESC = AXI DMA Engine
OPTION LONG_DESC = AXI MemoryMap to/from AXI Stream Direct Memory Access Engine
OPTION IP_GROUP = DMA and Timer:MICROBLAZE
OPTION ARCH_SUPPORT_MAP = (spartan6t=SUPERSEDED, spartan6=SUPERSEDED, spartan6l=SUPERSEDED, qspartan6t=SUPERSEDED, qspartan6=SUPERSEDED, aspartan6t=SUPERSEDED, aspartan6=SUPERSEDED, virtex6lx=SUPERSEDED, virtex6sx=SUPERSEDED, virtex6cx=SUPERSEDED, virtex6llx=SUPERSEDED, virtex6lsx=SUPERSEDED, qspartan6l=SUPERSEDED, qvirtex6lx=SUPERSEDED, qvirtex6sx=SUPERSEDED, qvirtex6fx=SUPERSEDED, qvirtex6tx=SUPERSEDED, virtex7=SUPERSEDED, kintex7=SUPERSEDED, artix7=SUPERSEDED, zynq=SUPERSEDED, virtex7l=SUPERSEDED, kintex7l=SUPERSEDED, aartix7=SUPERSEDED, artix7l=SUPERSEDED, virtex7ht=SUPERSEDED, qvirtex7=SUPERSEDED, qkintex7=SUPERSEDED, qkintex7l=SUPERSEDED, qartix7=SUPERSEDED, qartix7l=SUPERSEDED, azynq=SUPERSEDED, qzynq=SUPERSEDED, qvirtex7l=SUPERSEDED)


## Bus Interfaces
BUS_INTERFACE BUS = S_AXI_LITE, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = M_AXI_SG, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_INCLUDE_SG == 1)
BUS_INTERFACE BUS = M_AXI_MM2S, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_INCLUDE_MM2S == 1)
BUS_INTERFACE BUS = M_AXI_S2MM, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_INCLUDE_S2MM == 1)
BUS_INTERFACE BUS = M_AXIS_MM2S, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_INCLUDE_MM2S == 1)
BUS_INTERFACE BUS = S_AXIS_S2MM, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_INCLUDE_S2MM == 1)
BUS_INTERFACE BUS = M_AXIS_MM2S_CNTRL, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_INCLUDE_MM2S == 1 && C_SG_INCLUDE_STSCNTRL_STRM == 1)
BUS_INTERFACE BUS = S_AXIS_S2MM_STS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_INCLUDE_S2MM == 1 && C_SG_INCLUDE_STSCNTRL_STRM == 1)

## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXI_LITE_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), ASSIGNMENT = CONSTANT, BUS = S_AXI_LITE
PARAMETER C_S_AXI_LITE_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32), ASSIGNMENT = CONSTANT, BUS = S_AXI_LITE
PARAMETER C_DLYTMR_RESOLUTION = 125, DT = INTEGER, RANGE = (1:100000)
PARAMETER C_PRMRY_IS_ACLK_ASYNC = 0, DT = INTEGER, RANGE = (0,1), BUS = M_AXI_MM2S:M_AXI_S2MM:S_AXIS_S2MM_STS:M_AXIS_MM2S_CNTRL:M_AXIS_MM2S:S_AXIS_S2MM:S_AXI_LITE:M_AXI_SG, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_prmry_is_async
PARAMETER C_INCLUDE_SG = 1, DT = INTEGER, RANGE = (0,1)
PARAMETER C_ENABLE_MULTI_CHANNEL = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_SG == 1)
PARAMETER C_SG_INCLUDE_DESC_QUEUE = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_SG == 1 && C_ENABLE_MULTI_CHANNEL == 0)
PARAMETER C_SG_INCLUDE_STSCNTRL_STRM = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_SG == 1 && C_ENABLE_MULTI_CHANNEL == 0)
PARAMETER C_SG_USE_STSAPP_LENGTH = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_SG == 1 && C_SG_INCLUDE_STSCNTRL_STRM == 1 && C_ENABLE_MULTI_CHANNEL == 0)
PARAMETER C_SG_LENGTH_WIDTH = 14, DT = INTEGER, RANGE = (8:23)
PARAMETER C_M_AXI_SG_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXI_SG, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_SG_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXI_SG, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXIS_MM2S_CNTRL_TDATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXIS_MM2S_CNTRL, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1 && C_SG_INCLUDE_STSCNTRL_STRM == 1)
PARAMETER C_S_AXIS_S2MM_STS_TDATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S_AXIS_S2MM_STS, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1 && C_SG_INCLUDE_STSCNTRL_STRM == 1)
PARAMETER C_INCLUDE_MM2S = 1, DT = INTEGER, RANGE = (0,1)
PARAMETER C_INCLUDE_MM2S_SF = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_MM2S == 1)
PARAMETER C_INCLUDE_MM2S_DRE = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_MM2S == 1), IPLEVEL_DRC_PROC = iplevel_drc_mm2s_dre
PARAMETER C_MM2S_BURST_SIZE = 16, DT = INTEGER, RANGE = (16,32,64,128,256), ISVALID = (C_INCLUDE_MM2S == 1)
PARAMETER C_M_AXI_MM2S_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1)
PARAMETER C_M_AXI_MM2S_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32,64,128,256,512,1024), BUS = M_AXI_MM2S, ISVALID = (C_INCLUDE_MM2S == 1)
PARAMETER C_M_AXIS_MM2S_TDATA_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64,128,256,512,1024), BUS = M_AXIS_MM2S, ISVALID = (C_INCLUDE_MM2S == 1), IPLEVEL_DRC_PROC = iplevel_drc_mm2s_tdata_width
PARAMETER C_INCLUDE_S2MM = 1, DT = INTEGER, RANGE = (0,1)
PARAMETER C_INCLUDE_S2MM_SF = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_S2MM == 1)
PARAMETER C_INCLUDE_S2MM_DRE = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_S2MM == 1), IPLEVEL_DRC_PROC = iplevel_drc_s2mm_dre
PARAMETER C_S2MM_BURST_SIZE = 16, DT = INTEGER, RANGE = (16,32,64,128,256), ISVALID = (C_INCLUDE_S2MM == 1)
PARAMETER C_M_AXI_S2MM_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1)
PARAMETER C_M_AXI_S2MM_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32,64,128,256,512,1024), BUS = M_AXI_S2MM, ISVALID = (C_INCLUDE_S2MM == 1)
PARAMETER C_S_AXIS_S2MM_TDATA_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64,128,256,512,1024), BUS = S_AXIS_S2MM, ISVALID = (C_INCLUDE_S2MM == 1), IPLEVEL_DRC_PROC = iplevel_drc_s2mm_tdata_width
PARAMETER C_NUM_S2MM_CHANNELS = 1, DT = INTEGER, RANGE = (1:16), ISVALID = (C_ENABLE_MULTI_CHANNEL == 1 && C_INCLUDE_S2MM == 1), IPLEVEL_DRC_PROC = iplevel_drc_s2mm_channels
PARAMETER C_NUM_MM2S_CHANNELS = 1, DT = INTEGER, RANGE = (1:16), ISVALID = (C_ENABLE_MULTI_CHANNEL == 1 && C_INCLUDE_MM2S == 1), IPLEVEL_DRC_PROC = iplevel_drc_mm2s_channels
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_INSTANCE = axi_dma, DT = STRING
PARAMETER C_BASEADDR = 0xffffffff, DT = STD_LOGIC_VECTOR(31 downto 0), PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_LITE, MIN_SIZE = 0x1000, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_HIGHADDR = 0x00000000, DT = STD_LOGIC_VECTOR(31 downto 0), PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_LITE, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_S_AXI_LITE_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = S_AXI_LITE
PARAMETER C_M_AXI_SG_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = M_AXI_SG
PARAMETER C_M_AXI_MM2S_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = M_AXI_MM2S, ISVALID = (C_INCLUDE_MM2S == 1)
PARAMETER C_M_AXI_S2MM_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = M_AXI_S2MM, ISVALID = (C_INCLUDE_S2MM == 1)
PARAMETER C_S_AXI_LITE_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI_LITE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_LITE_SUPPORTS_READ = 1, DT = INTEGER, BUS = S_AXI_LITE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_LITE_SUPPORTS_WRITE = 1, DT = INTEGER, BUS = S_AXI_LITE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_SG_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_SG_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_SG_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_SG_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_SG_SUPPORTS_READ = 1, DT = STRING, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_SG_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI_SG, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_SG == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_MM2S_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_MM2S_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_MM2S_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_MM2S_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_MM2S_SUPPORTS_READ = 1, DT = STRING, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_MM2S_SUPPORTS_WRITE = 0, DT = STRING, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_MM2S_READ_ISSUING = 4, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mm2s_issuing
PARAMETER C_INTERCONNECT_M_AXI_MM2S_READ_FIFO_DEPTH = 512, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = OPTIONAL, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_SUPPORTS_READ = 0, DT = STRING, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_S2MM_WRITE_ISSUING = 4, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_s2mm_issuing
PARAMETER C_INTERCONNECT_M_AXI_S2MM_WRITE_FIFO_DEPTH = 512, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = OPTIONAL, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL
PARAMETER C_M_AXIS_MM2S_CNTRL_PROTOCOL = XIL_AXI_STREAM_ETH_CTRL, DT = STRING, BUS = M_AXIS_MM2S_CNTRL, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1 && C_SG_INCLUDE_STSCNTRL_STRM == 1), TYPE = NON_HDL
PARAMETER C_S_AXIS_S2MM_STS_PROTOCOL = XIL_AXI_STREAM_ETH_CTRL, DT = STRING, BUS = S_AXIS_S2MM_STS, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1 && C_SG_INCLUDE_STSCNTRL_STRM == 1), TYPE = NON_HDL
PARAMETER C_M_AXIS_MM2S_PROTOCOL = XIL_AXI_STREAM_ETH_DATA, DT = STRING, BUS = M_AXIS_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1), TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_protocol
PARAMETER C_S_AXIS_S2MM_PROTOCOL = XIL_AXI_STREAM_ETH_DATA, DT = STRING, BUS = S_AXIS_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1), TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_protocol
PARAMETER C_GENERIC = 0, DT = INTEGER, RANGE = (0,1), TYPE = NON_HDL
PARAMETER C_CHIPESCOPE = 0, DT = INTEGER, RANGE = (0,1)

## Ports
PORT s_axi_lite_aclk = "", DIR = I, SIGIS = CLK, BUS = S_AXI_LITE
PORT m_axi_sg_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_SG
PORT m_axi_mm2s_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_MM2S:M_AXIS_MM2S_CNTRL
PORT m_axi_s2mm_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_S2MM:S_AXIS_S2MM_STS
PORT axi_resetn = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI_LITE:M_AXI_SG:M_AXI_MM2S:M_AXI_S2MM:S_AXIS_S2MM_STS:M_AXIS_MM2S_CNTRL:M_AXIS_MM2S:S_AXIS_S2MM
PORT s_axi_lite_awvalid = AWVALID, DIR = I, BUS = S_AXI_LITE
PORT s_axi_lite_awready = AWREADY, DIR = O, BUS = S_AXI_LITE
PORT s_axi_lite_awaddr = AWADDR, DIR = I, VEC = [C_S_AXI_LITE_ADDR_WIDTH-1:0], BUS = S_AXI_LITE, ENDIAN = LITTLE
PORT s_axi_lite_wvalid = WVALID, DIR = I, BUS = S_AXI_LITE
PORT s_axi_lite_wready = WREADY, DIR = O, BUS = S_AXI_LITE
PORT s_axi_lite_wdata = WDATA, DIR = I, VEC = [C_S_AXI_LITE_DATA_WIDTH-1:0], BUS = S_AXI_LITE, ENDIAN = LITTLE
PORT s_axi_lite_bresp = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_LITE, ENDIAN = LITTLE
PORT s_axi_lite_bvalid = BVALID, DIR = O, BUS = S_AXI_LITE
PORT s_axi_lite_bready = BREADY, DIR = I, BUS = S_AXI_LITE
PORT s_axi_lite_arvalid = ARVALID, DIR = I, BUS = S_AXI_LITE
PORT s_axi_lite_arready = ARREADY, DIR = O, BUS = S_AXI_LITE
PORT s_axi_lite_araddr = ARADDR, DIR = I, VEC = [C_S_AXI_LITE_ADDR_WIDTH-1:0], BUS = S_AXI_LITE, ENDIAN = LITTLE
PORT s_axi_lite_rvalid = RVALID, DIR = O, BUS = S_AXI_LITE
PORT s_axi_lite_rready = RREADY, DIR = I, BUS = S_AXI_LITE
PORT s_axi_lite_rdata = RDATA, DIR = O, VEC = [C_S_AXI_LITE_DATA_WIDTH-1:0], BUS = S_AXI_LITE, ENDIAN = LITTLE
PORT s_axi_lite_rresp = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_LITE, ENDIAN = LITTLE
PORT m_axi_sg_awaddr = AWADDR, DIR = O, VEC = [C_M_AXI_SG_ADDR_WIDTH-1:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_awuser = AWUSER, DIR = O, VEC = [3:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_awvalid = AWVALID, DIR = O, BUS = M_AXI_SG
PORT m_axi_sg_awready = AWREADY, DIR = I, BUS = M_AXI_SG
PORT m_axi_sg_wdata = WDATA, DIR = O, VEC = [C_M_AXI_SG_DATA_WIDTH-1:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_wstrb = WSTRB, DIR = O, VEC = [(C_M_AXI_SG_DATA_WIDTH/8)-1:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_wlast = WLAST, DIR = O, BUS = M_AXI_SG
PORT m_axi_sg_wvalid = WVALID, DIR = O, BUS = M_AXI_SG
PORT m_axi_sg_wready = WREADY, DIR = I, BUS = M_AXI_SG
PORT m_axi_sg_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_bvalid = BVALID, DIR = I, BUS = M_AXI_SG
PORT m_axi_sg_bready = BREADY, DIR = O, BUS = M_AXI_SG
PORT m_axi_sg_araddr = ARADDR, DIR = O, VEC = [C_M_AXI_SG_ADDR_WIDTH-1:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_arlen = ARLEN, DIR = O, VEC = [7:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_arsize = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_arburst = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_arprot = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_arcache = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_aruser = ARUSER, DIR = O, VEC = [3:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_arvalid = ARVALID, DIR = O, BUS = M_AXI_SG
PORT m_axi_sg_arready = ARREADY, DIR = I, BUS = M_AXI_SG
PORT m_axi_sg_rdata = RDATA, DIR = I, VEC = [C_M_AXI_SG_DATA_WIDTH-1:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_rresp = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI_SG, ENDIAN = LITTLE
PORT m_axi_sg_rlast = RLAST, DIR = I, BUS = M_AXI_SG
PORT m_axi_sg_rvalid = RVALID, DIR = I, BUS = M_AXI_SG
PORT m_axi_sg_rready = RREADY, DIR = O, BUS = M_AXI_SG
PORT m_axi_mm2s_araddr = ARADDR, DIR = O, VEC = [C_M_AXI_MM2S_ADDR_WIDTH-1:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_arlen = ARLEN, DIR = O, VEC = [7:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_arsize = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_arburst = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_arprot = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_arcache = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_aruser = ARUSER, DIR = O, VEC = [3:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_arvalid = ARVALID, DIR = O, BUS = M_AXI_MM2S
PORT m_axi_mm2s_arready = ARREADY, DIR = I, BUS = M_AXI_MM2S
PORT m_axi_mm2s_rdata = RDATA, DIR = I, VEC = [C_M_AXI_MM2S_DATA_WIDTH-1:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_rresp = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_rlast = RLAST, DIR = I, BUS = M_AXI_MM2S
PORT m_axi_mm2s_rvalid = RVALID, DIR = I, BUS = M_AXI_MM2S
PORT m_axi_mm2s_rready = RREADY, DIR = O, BUS = M_AXI_MM2S
PORT mm2s_prmry_reset_out_n = RESET_OUT_N, DIR = O
PORT m_axis_mm2s_tdata = TDATA, DIR = O, VEC = [C_M_AXIS_MM2S_TDATA_WIDTH-1:0], BUS = M_AXIS_MM2S, ENDIAN = LITTLE
PORT m_axis_mm2s_tkeep = TKEEP, DIR = O, VEC = [(C_M_AXIS_MM2S_TDATA_WIDTH/8)-1:0], BUS = M_AXIS_MM2S, ENDIAN = LITTLE
PORT m_axis_mm2s_tvalid = TVALID, DIR = O, BUS = M_AXIS_MM2S
PORT m_axis_mm2s_tready = TREADY, DIR = I, BUS = M_AXIS_MM2S
PORT m_axis_mm2s_tlast = TLAST, DIR = O, BUS = M_AXIS_MM2S
PORT m_axis_mm2s_tuser = TUSER, DIR = O, VEC = [3:0], BUS = M_AXIS_MM2S, ENDIAN = LITTLE
PORT m_axis_mm2s_tid = TID, DIR = O, VEC = [4:0], BUS = M_AXIS_MM2S, ENDIAN = LITTLE
PORT m_axis_mm2s_tdest = TDEST, DIR = O, VEC = [4:0], BUS = M_AXIS_MM2S, ENDIAN = LITTLE
PORT mm2s_cntrl_reset_out_n = RESET_OUT_N, DIR = O
PORT m_axis_mm2s_cntrl_tdata = TDATA, DIR = O, VEC = [C_M_AXIS_MM2S_CNTRL_TDATA_WIDTH-1:0], BUS = M_AXIS_MM2S_CNTRL, ENDIAN = LITTLE
PORT m_axis_mm2s_cntrl_tkeep = TKEEP, DIR = O, VEC = [(C_M_AXIS_MM2S_CNTRL_TDATA_WIDTH/8)-1:0], BUS = M_AXIS_MM2S_CNTRL, ENDIAN = LITTLE
PORT m_axis_mm2s_cntrl_tvalid = TVALID, DIR = O, BUS = M_AXIS_MM2S_CNTRL
PORT m_axis_mm2s_cntrl_tready = TREADY, DIR = I, BUS = M_AXIS_MM2S_CNTRL
PORT m_axis_mm2s_cntrl_tlast = TLAST, DIR = O, BUS = M_AXIS_MM2S_CNTRL
PORT m_axi_s2mm_awaddr = AWADDR, DIR = O, VEC = [C_M_AXI_S2MM_ADDR_WIDTH-1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_awuser = AWUSER, DIR = O, VEC = [3:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_awvalid = AWVALID, DIR = O, BUS = M_AXI_S2MM
PORT m_axi_s2mm_awready = AWREADY, DIR = I, BUS = M_AXI_S2MM
PORT m_axi_s2mm_wdata = WDATA, DIR = O, VEC = [C_M_AXI_S2MM_DATA_WIDTH-1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_wstrb = WSTRB, DIR = O, VEC = [(C_M_AXI_S2MM_DATA_WIDTH/8)-1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_wlast = WLAST, DIR = O, BUS = M_AXI_S2MM
PORT m_axi_s2mm_wvalid = WVALID, DIR = O, BUS = M_AXI_S2MM
PORT m_axi_s2mm_wready = WREADY, DIR = I, BUS = M_AXI_S2MM
PORT m_axi_s2mm_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_bvalid = BVALID, DIR = I, BUS = M_AXI_S2MM
PORT m_axi_s2mm_bready = BREADY, DIR = O, BUS = M_AXI_S2MM
PORT s2mm_prmry_reset_out_n = RESET_OUT_N, DIR = O
PORT s_axis_s2mm_tdata = TDATA, DIR = I, VEC = [C_S_AXIS_S2MM_TDATA_WIDTH-1:0], BUS = S_AXIS_S2MM, ENDIAN = LITTLE
PORT s_axis_s2mm_tkeep = TKEEP, DIR = I, VEC = [(C_S_AXIS_S2MM_TDATA_WIDTH/8)-1:0], BUS = S_AXIS_S2MM, ENDIAN = LITTLE, INITIALVAL = VCC
PORT s_axis_s2mm_tvalid = TVALID, DIR = I, BUS = S_AXIS_S2MM
PORT s_axis_s2mm_tready = TREADY, DIR = O, BUS = S_AXIS_S2MM
PORT s_axis_s2mm_tlast = TLAST, DIR = I, BUS = S_AXIS_S2MM
PORT s_axis_s2mm_tuser = TUSER, DIR = I, VEC = [3:0], BUS = S_AXIS_S2MM, ENDIAN = LITTLE
PORT s_axis_s2mm_tid = TID, DIR = I, VEC = [4:0], BUS = S_AXIS_S2MM, ENDIAN = LITTLE
PORT s_axis_s2mm_tdest = TDEST, DIR = I, VEC = [4:0], BUS = S_AXIS_S2MM, ENDIAN = LITTLE
PORT s2mm_sts_reset_out_n = RESET_OUT_N, DIR = O
PORT s_axis_s2mm_sts_tdata = TDATA, DIR = I, VEC = [C_S_AXIS_S2MM_STS_TDATA_WIDTH-1:0], BUS = S_AXIS_S2MM_STS, ENDIAN = LITTLE
PORT s_axis_s2mm_sts_tkeep = TKEEP, DIR = I, VEC = [(C_S_AXIS_S2MM_STS_TDATA_WIDTH/8)-1:0], BUS = S_AXIS_S2MM_STS, ENDIAN = LITTLE, INITIALVAL = VCC
PORT s_axis_s2mm_sts_tvalid = TVALID, DIR = I, BUS = S_AXIS_S2MM_STS
PORT s_axis_s2mm_sts_tready = TREADY, DIR = O, BUS = S_AXIS_S2MM_STS
PORT s_axis_s2mm_sts_tlast = TLAST, DIR = I, BUS = S_AXIS_S2MM_STS
PORT mm2s_introut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH
PORT s2mm_introut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH

END
